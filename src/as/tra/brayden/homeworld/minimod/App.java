package as.tra.brayden.homeworld.minimod;

import as.tra.brayden.homeworld.minimod.files.Directory;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;

public class App {
    private JButton selectVanillaFolder;
    private JPanel panelMain;
    private JButton chooseModFolderButton;
    private JLabel vanillaFolderText;
    private JLabel modFolderText = new JLabel();
    private JPanel vanillaListPanel = new JPanel();
    private JPanel modListPanel;

    private File vanillaDataFolder;
    private File modDataFolder;

    public App() {
        $$$setupUI$$$();
        selectVanillaFolder.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                JFileChooser fc = new JFileChooser();
                FileFilter dataFilter = new FileFilter() {
                    @Override
                    public boolean accept(File f) {
                        return (f.isDirectory() && f.getName().equals("Data"));
                    }

                    @Override
                    public String getDescription() {
                        return "Data Folder";
                    }
                };
                fc.setDialogTitle("Select HomeworldRM Vanilla Data Folder");
                //fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

                fc.addChoosableFileFilter(dataFilter);
                fc.setFileFilter(dataFilter);

                //fc.addChoosableFileFilter(ff);



                if (fc.showOpenDialog(panelMain) == JFileChooser.APPROVE_OPTION) {
                    vanillaDataFolder = fc.getSelectedFile();
                    vanillaFolderText.setText(vanillaDataFolder.getAbsolutePath());
                    Component c = new Directory(vanillaDataFolder).getListComponent();

                    modListPanel.removeAll();
                    vanillaListPanel.add(c);
                }
            }
        });


        chooseModFolderButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = new JFileChooser();
                FileFilter ff = new FileFilter() {
                    @Override
                    public boolean accept(File f) {
                        return f.isDirectory();
                    }

                    @Override
                    public String getDescription() {
                        return "Folders";
                    }
                };
                fc.setDialogTitle("Select Your Mod Data Folder");
                fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);

                fc.addChoosableFileFilter(ff);
                fc.setFileFilter(ff);

                if (fc.showOpenDialog(panelMain) == JFileChooser.APPROVE_OPTION) {
                    modDataFolder = fc.getSelectedFile();
                    modFolderText.setText(modDataFolder.getAbsolutePath());

                    modListPanel.removeAll();
                    modListPanel.add(new Directory(modDataFolder).getListComponent());

                }

            }
        });

    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("HomeworldRM MiniMod 1.0");
        frame.setContentPane(new App().panelMain);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here

        vanillaListPanel.setLayout(new GridLayout(1, 1));

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panelMain = new JPanel();
        panelMain.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        selectVanillaFolder = new JButton();
        selectVanillaFolder.setText("Choose Vanilla Data/ folder");
        panelMain.add(selectVanillaFolder, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 10, 0, 0), -1, -1));
        panel1.setForeground(new Color(-8355712));
        panelMain.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, -1), null, new Dimension(-1, 100), 0, false));
        Font modFolderTextFont = this.$$$getFont$$$(null, -1, 10, modFolderText.getFont());
        if (modFolderTextFont != null) modFolderText.setFont(modFolderTextFont);
        modFolderText.setForeground(new Color(-9934744));
        modFolderText.setText("test");
        panel1.add(modFolderText, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        modListPanel = new JPanel();
        modListPanel.setLayout(new CardLayout(0, 0));
        panelMain.add(modListPanel, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 400), null, null, 0, false));
        vanillaListPanel = new JPanel();
        vanillaListPanel.setLayout(new CardLayout(0, 0));
        panelMain.add(vanillaListPanel, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(-1, 400), null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 10, 0, 0), -1, -1));
        panel2.setForeground(new Color(-12303292));
        panelMain.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, -1), null, new Dimension(-1, 100), 0, false));
        vanillaFolderText = new JLabel();
        Font vanillaFolderTextFont = this.$$$getFont$$$(null, -1, 10, vanillaFolderText.getFont());
        if (vanillaFolderTextFont != null) vanillaFolderText.setFont(vanillaFolderTextFont);
        vanillaFolderText.setForeground(new Color(-9934744));
        vanillaFolderText.setText("test");
        panel2.add(vanillaFolderText, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chooseModFolderButton = new JButton();
        chooseModFolderButton.setText("Choose Mod folder");
        panelMain.add(chooseModFolderButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
